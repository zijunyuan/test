//
//@Time : 2020-02-25 17:05
//@Author : siminliao

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: backend/group.proto

package backend

import (
	context "context"
	common "git.garena.com/shopee/loan-service/airpay_backend/airpay_counter/apc_refactory/apc_protobuf/protobuf3.pb/group/common"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetGroupsReq_SortOrder int32

const (
	GetGroupsReq_S_Default GetGroupsReq_SortOrder = 0
	GetGroupsReq_S_DESC    GetGroupsReq_SortOrder = 1 // 降序
	GetGroupsReq_S_ASC     GetGroupsReq_SortOrder = 2 // 升序
)

// Enum value maps for GetGroupsReq_SortOrder.
var (
	GetGroupsReq_SortOrder_name = map[int32]string{
		0: "S_Default",
		1: "S_DESC",
		2: "S_ASC",
	}
	GetGroupsReq_SortOrder_value = map[string]int32{
		"S_Default": 0,
		"S_DESC":    1,
		"S_ASC":     2,
	}
)

func (x GetGroupsReq_SortOrder) Enum() *GetGroupsReq_SortOrder {
	p := new(GetGroupsReq_SortOrder)
	*p = x
	return p
}

func (x GetGroupsReq_SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetGroupsReq_SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_group_proto_enumTypes[0].Descriptor()
}

func (GetGroupsReq_SortOrder) Type() protoreflect.EnumType {
	return &file_backend_group_proto_enumTypes[0]
}

func (x GetGroupsReq_SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetGroupsReq_SortOrder.Descriptor instead.
func (GetGroupsReq_SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{6, 0}
}

type AddGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*common.Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *AddGroupsReq) Reset() {
	*x = AddGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupsReq) ProtoMessage() {}

func (x *AddGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupsReq.ProtoReflect.Descriptor instead.
func (*AddGroupsReq) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{0}
}

func (x *AddGroupsReq) GetGroups() []*common.Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type AddGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*common.Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *AddGroupsResp) Reset() {
	*x = AddGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupsResp) ProtoMessage() {}

func (x *AddGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupsResp.ProtoReflect.Descriptor instead.
func (*AddGroupsResp) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{1}
}

func (x *AddGroupsResp) GetGroups() []*common.Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type AddGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *common.Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *AddGroupReq) Reset() {
	*x = AddGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupReq) ProtoMessage() {}

func (x *AddGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupReq.ProtoReflect.Descriptor instead.
func (*AddGroupReq) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{2}
}

func (x *AddGroupReq) GetGroup() *common.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type AddGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *common.Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *AddGroupResp) Reset() {
	*x = AddGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupResp) ProtoMessage() {}

func (x *AddGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupResp.ProtoReflect.Descriptor instead.
func (*AddGroupResp) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{3}
}

func (x *AddGroupResp) GetGroup() *common.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type EditGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*common.Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *EditGroupsReq) Reset() {
	*x = EditGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditGroupsReq) ProtoMessage() {}

func (x *EditGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditGroupsReq.ProtoReflect.Descriptor instead.
func (*EditGroupsReq) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{4}
}

func (x *EditGroupsReq) GetGroups() []*common.Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type EditGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*common.Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *EditGroupsResp) Reset() {
	*x = EditGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditGroupsResp) ProtoMessage() {}

func (x *EditGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditGroupsResp.ProtoReflect.Descriptor instead.
func (*EditGroupsResp) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{5}
}

func (x *EditGroupsResp) GetGroups() []*common.Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId        uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName      string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`                   //模糊搜索
	GroupDesc      string `protobuf:"bytes,3,opt,name=group_desc,json=groupDesc,proto3" json:"group_desc,omitempty"`                   //模糊搜索
	Creator        string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`                                        //模糊搜索
	Type           int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`                                             // 规则组类型，见common/group.proto: Group_Type
	SortCreateTime uint32 `protobuf:"varint,6,opt,name=sort_create_time,json=sortCreateTime,proto3" json:"sort_create_time,omitempty"` // 见SortOrder
	PageSize       uint32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNo         uint32 `protobuf:"varint,8,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
}

func (x *GetGroupsReq) Reset() {
	*x = GetGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsReq) ProtoMessage() {}

func (x *GetGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsReq.ProtoReflect.Descriptor instead.
func (*GetGroupsReq) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{6}
}

func (x *GetGroupsReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupsReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GetGroupsReq) GetGroupDesc() string {
	if x != nil {
		return x.GroupDesc
	}
	return ""
}

func (x *GetGroupsReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *GetGroupsReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetGroupsReq) GetSortCreateTime() uint32 {
	if x != nil {
		return x.SortCreateTime
	}
	return 0
}

func (x *GetGroupsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGroupsReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

type GetGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*common.Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Count  uint32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetGroupsResp) Reset() {
	*x = GetGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsResp) ProtoMessage() {}

func (x *GetGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsResp.ProtoReflect.Descriptor instead.
func (*GetGroupsResp) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{7}
}

func (x *GetGroupsResp) GetGroups() []*common.Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetGroupsResp) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GetGroupReq) Reset() {
	*x = GetGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupReq) ProtoMessage() {}

func (x *GetGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupReq.ProtoReflect.Descriptor instead.
func (*GetGroupReq) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{8}
}

func (x *GetGroupReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type GetGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *common.Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GetGroupResp) Reset() {
	*x = GetGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupResp) ProtoMessage() {}

func (x *GetGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupResp.ProtoReflect.Descriptor instead.
func (*GetGroupResp) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{9}
}

func (x *GetGroupResp) GetGroup() *common.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type BatchGetGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIds []uint32 `protobuf:"varint,1,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (x *BatchGetGroupsReq) Reset() {
	*x = BatchGetGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetGroupsReq) ProtoMessage() {}

func (x *BatchGetGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetGroupsReq.ProtoReflect.Descriptor instead.
func (*BatchGetGroupsReq) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{10}
}

func (x *BatchGetGroupsReq) GetGroupIds() []uint32 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type BatchGetGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupsMap map[uint32]*common.Group `protobuf:"bytes,1,rep,name=groups_map,json=groupsMap,proto3" json:"groups_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetGroupsResp) Reset() {
	*x = BatchGetGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetGroupsResp) ProtoMessage() {}

func (x *BatchGetGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetGroupsResp.ProtoReflect.Descriptor instead.
func (*BatchGetGroupsResp) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{11}
}

func (x *BatchGetGroupsResp) GetGroupsMap() map[uint32]*common.Group {
	if x != nil {
		return x.GroupsMap
	}
	return nil
}

type GetGroupLogsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Version  uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	PageSize uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNo   uint32 `protobuf:"varint,4,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
}

func (x *GetGroupLogsReq) Reset() {
	*x = GetGroupLogsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupLogsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupLogsReq) ProtoMessage() {}

func (x *GetGroupLogsReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupLogsReq.ProtoReflect.Descriptor instead.
func (*GetGroupLogsReq) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{12}
}

func (x *GetGroupLogsReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupLogsReq) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetGroupLogsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGroupLogsReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

type GetGroupLogsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs  []*common.GroupLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	Count uint32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetGroupLogsResp) Reset() {
	*x = GetGroupLogsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupLogsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupLogsResp) ProtoMessage() {}

func (x *GetGroupLogsResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupLogsResp.ProtoReflect.Descriptor instead.
func (*GetGroupLogsResp) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{13}
}

func (x *GetGroupLogsResp) GetLogs() []*common.GroupLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *GetGroupLogsResp) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type IfInGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint32                 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Filters []*IfInGroupReq_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *IfInGroupReq) Reset() {
	*x = IfInGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfInGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfInGroupReq) ProtoMessage() {}

func (x *IfInGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfInGroupReq.ProtoReflect.Descriptor instead.
func (*IfInGroupReq) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{14}
}

func (x *IfInGroupReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *IfInGroupReq) GetFilters() []*IfInGroupReq_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type IfInGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfInGroup bool `protobuf:"varint,1,opt,name=if_in_group,json=ifInGroup,proto3" json:"if_in_group,omitempty"`
}

func (x *IfInGroupResp) Reset() {
	*x = IfInGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfInGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfInGroupResp) ProtoMessage() {}

func (x *IfInGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfInGroupResp.ProtoReflect.Descriptor instead.
func (*IfInGroupResp) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{15}
}

func (x *IfInGroupResp) GetIfInGroup() bool {
	if x != nil {
		return x.IfInGroup
	}
	return false
}

type IfInGroupReq_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionType  int32  `protobuf:"varint,1,opt,name=dimension_type,json=dimensionType,proto3" json:"dimension_type,omitempty"`
	DimensionValue string `protobuf:"bytes,2,opt,name=dimension_value,json=dimensionValue,proto3" json:"dimension_value,omitempty"`
}

func (x *IfInGroupReq_Filter) Reset() {
	*x = IfInGroupReq_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_group_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfInGroupReq_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfInGroupReq_Filter) ProtoMessage() {}

func (x *IfInGroupReq_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_backend_group_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfInGroupReq_Filter.ProtoReflect.Descriptor instead.
func (*IfInGroupReq_Filter) Descriptor() ([]byte, []int) {
	return file_backend_group_proto_rawDescGZIP(), []int{14, 0}
}

func (x *IfInGroupReq_Filter) GetDimensionType() int32 {
	if x != nil {
		return x.DimensionType
	}
	return 0
}

func (x *IfInGroupReq_Filter) GetDimensionValue() string {
	if x != nil {
		return x.DimensionValue
	}
	return ""
}

var File_backend_group_proto protoreflect.FileDescriptor

var file_backend_group_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x39,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x35, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x36, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x39, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x63, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x22, 0x3a, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22,
	0xa8, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x22, 0x31, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x02, 0x22, 0x4f, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x30, 0x0a,
	0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22,
	0xb1, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x63,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x4d, 0x61, 0x70, 0x1a, 0x4e, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x22, 0x51, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x49, 0x66, 0x49, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x66,
	0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x58, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x0d, 0x49, 0x66, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x66, 0x49, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0xb5, 0x04, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x45, 0x64,
	0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x17, 0x2e, 0x61,
	0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16,
	0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x2e,
	0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x4c, 0x6f, 0x67,
	0x12, 0x1a, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61,
	0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x49,
	0x66, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x66, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x66,
	0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x78, 0x5a,
	0x76, 0x67, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x61, 0x69, 0x72, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x61, 0x69, 0x72, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x61, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x33, 0x2e, 0x70, 0x62, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_group_proto_rawDescOnce sync.Once
	file_backend_group_proto_rawDescData = file_backend_group_proto_rawDesc
)

func file_backend_group_proto_rawDescGZIP() []byte {
	file_backend_group_proto_rawDescOnce.Do(func() {
		file_backend_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_group_proto_rawDescData)
	})
	return file_backend_group_proto_rawDescData
}

var file_backend_group_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_backend_group_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_backend_group_proto_goTypes = []interface{}{
	(GetGroupsReq_SortOrder)(0), // 0: apc.group.GetGroupsReq.SortOrder
	(*AddGroupsReq)(nil),        // 1: apc.group.AddGroupsReq
	(*AddGroupsResp)(nil),       // 2: apc.group.AddGroupsResp
	(*AddGroupReq)(nil),         // 3: apc.group.AddGroupReq
	(*AddGroupResp)(nil),        // 4: apc.group.AddGroupResp
	(*EditGroupsReq)(nil),       // 5: apc.group.EditGroupsReq
	(*EditGroupsResp)(nil),      // 6: apc.group.EditGroupsResp
	(*GetGroupsReq)(nil),        // 7: apc.group.GetGroupsReq
	(*GetGroupsResp)(nil),       // 8: apc.group.GetGroupsResp
	(*GetGroupReq)(nil),         // 9: apc.group.GetGroupReq
	(*GetGroupResp)(nil),        // 10: apc.group.GetGroupResp
	(*BatchGetGroupsReq)(nil),   // 11: apc.group.BatchGetGroupsReq
	(*BatchGetGroupsResp)(nil),  // 12: apc.group.BatchGetGroupsResp
	(*GetGroupLogsReq)(nil),     // 13: apc.group.GetGroupLogsReq
	(*GetGroupLogsResp)(nil),    // 14: apc.group.GetGroupLogsResp
	(*IfInGroupReq)(nil),        // 15: apc.group.IfInGroupReq
	(*IfInGroupResp)(nil),       // 16: apc.group.IfInGroupResp
	nil,                         // 17: apc.group.BatchGetGroupsResp.GroupsMapEntry
	(*IfInGroupReq_Filter)(nil), // 18: apc.group.IfInGroupReq.Filter
	(*common.Group)(nil),        // 19: apc.group.Group
	(*common.GroupLog)(nil),     // 20: apc.group.GroupLog
}
var file_backend_group_proto_depIdxs = []int32{
	19, // 0: apc.group.AddGroupsReq.groups:type_name -> apc.group.Group
	19, // 1: apc.group.AddGroupsResp.groups:type_name -> apc.group.Group
	19, // 2: apc.group.AddGroupReq.group:type_name -> apc.group.Group
	19, // 3: apc.group.AddGroupResp.group:type_name -> apc.group.Group
	19, // 4: apc.group.EditGroupsReq.groups:type_name -> apc.group.Group
	19, // 5: apc.group.EditGroupsResp.groups:type_name -> apc.group.Group
	19, // 6: apc.group.GetGroupsResp.groups:type_name -> apc.group.Group
	19, // 7: apc.group.GetGroupResp.group:type_name -> apc.group.Group
	17, // 8: apc.group.BatchGetGroupsResp.groups_map:type_name -> apc.group.BatchGetGroupsResp.GroupsMapEntry
	20, // 9: apc.group.GetGroupLogsResp.logs:type_name -> apc.group.GroupLog
	18, // 10: apc.group.IfInGroupReq.filters:type_name -> apc.group.IfInGroupReq.Filter
	19, // 11: apc.group.BatchGetGroupsResp.GroupsMapEntry.value:type_name -> apc.group.Group
	1,  // 12: apc.group.BackendService.AddGroups:input_type -> apc.group.AddGroupsReq
	5,  // 13: apc.group.BackendService.EditGroups:input_type -> apc.group.EditGroupsReq
	7,  // 14: apc.group.BackendService.GetGroups:input_type -> apc.group.GetGroupsReq
	11, // 15: apc.group.BackendService.BatchGetGroups:input_type -> apc.group.BatchGetGroupsReq
	3,  // 16: apc.group.BackendService.AddGroup:input_type -> apc.group.AddGroupReq
	9,  // 17: apc.group.BackendService.GetGroup:input_type -> apc.group.GetGroupReq
	13, // 18: apc.group.BackendService.GetGroupsLog:input_type -> apc.group.GetGroupLogsReq
	15, // 19: apc.group.BackendService.IfInGroup:input_type -> apc.group.IfInGroupReq
	2,  // 20: apc.group.BackendService.AddGroups:output_type -> apc.group.AddGroupsResp
	6,  // 21: apc.group.BackendService.EditGroups:output_type -> apc.group.EditGroupsResp
	8,  // 22: apc.group.BackendService.GetGroups:output_type -> apc.group.GetGroupsResp
	12, // 23: apc.group.BackendService.BatchGetGroups:output_type -> apc.group.BatchGetGroupsResp
	4,  // 24: apc.group.BackendService.AddGroup:output_type -> apc.group.AddGroupResp
	10, // 25: apc.group.BackendService.GetGroup:output_type -> apc.group.GetGroupResp
	14, // 26: apc.group.BackendService.GetGroupsLog:output_type -> apc.group.GetGroupLogsResp
	16, // 27: apc.group.BackendService.IfInGroup:output_type -> apc.group.IfInGroupResp
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_backend_group_proto_init() }
func file_backend_group_proto_init() {
	if File_backend_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupLogsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupLogsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfInGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfInGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_group_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfInGroupReq_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_group_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_group_proto_goTypes,
		DependencyIndexes: file_backend_group_proto_depIdxs,
		EnumInfos:         file_backend_group_proto_enumTypes,
		MessageInfos:      file_backend_group_proto_msgTypes,
	}.Build()
	File_backend_group_proto = out.File
	file_backend_group_proto_rawDesc = nil
	file_backend_group_proto_goTypes = nil
	file_backend_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendServiceClient interface {
	// XXX: 写接口的grpc header需要有operator字段
	// 批量增加规则组
	AddGroups(ctx context.Context, in *AddGroupsReq, opts ...grpc.CallOption) (*AddGroupsResp, error)
	// 批量修改规则组
	EditGroups(ctx context.Context, in *EditGroupsReq, opts ...grpc.CallOption) (*EditGroupsResp, error)
	// 查找规则组
	GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsResp, error)
	// 批量获取规则组
	BatchGetGroups(ctx context.Context, in *BatchGetGroupsReq, opts ...grpc.CallOption) (*BatchGetGroupsResp, error)
	// 增加单个规则组
	AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*AddGroupResp, error)
	// 获取单个规则详情
	GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error)
	// 获取规则流水日志
	GetGroupsLog(ctx context.Context, in *GetGroupLogsReq, opts ...grpc.CallOption) (*GetGroupLogsResp, error)
	// 计算是否匹配规则
	IfInGroup(ctx context.Context, in *IfInGroupReq, opts ...grpc.CallOption) (*IfInGroupResp, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) AddGroups(ctx context.Context, in *AddGroupsReq, opts ...grpc.CallOption) (*AddGroupsResp, error) {
	out := new(AddGroupsResp)
	err := c.cc.Invoke(ctx, "/apc.group.BackendService/AddGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) EditGroups(ctx context.Context, in *EditGroupsReq, opts ...grpc.CallOption) (*EditGroupsResp, error) {
	out := new(EditGroupsResp)
	err := c.cc.Invoke(ctx, "/apc.group.BackendService/EditGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsResp, error) {
	out := new(GetGroupsResp)
	err := c.cc.Invoke(ctx, "/apc.group.BackendService/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) BatchGetGroups(ctx context.Context, in *BatchGetGroupsReq, opts ...grpc.CallOption) (*BatchGetGroupsResp, error) {
	out := new(BatchGetGroupsResp)
	err := c.cc.Invoke(ctx, "/apc.group.BackendService/BatchGetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*AddGroupResp, error) {
	out := new(AddGroupResp)
	err := c.cc.Invoke(ctx, "/apc.group.BackendService/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error) {
	out := new(GetGroupResp)
	err := c.cc.Invoke(ctx, "/apc.group.BackendService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetGroupsLog(ctx context.Context, in *GetGroupLogsReq, opts ...grpc.CallOption) (*GetGroupLogsResp, error) {
	out := new(GetGroupLogsResp)
	err := c.cc.Invoke(ctx, "/apc.group.BackendService/GetGroupsLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) IfInGroup(ctx context.Context, in *IfInGroupReq, opts ...grpc.CallOption) (*IfInGroupResp, error) {
	out := new(IfInGroupResp)
	err := c.cc.Invoke(ctx, "/apc.group.BackendService/IfInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
type BackendServiceServer interface {
	// XXX: 写接口的grpc header需要有operator字段
	// 批量增加规则组
	AddGroups(context.Context, *AddGroupsReq) (*AddGroupsResp, error)
	// 批量修改规则组
	EditGroups(context.Context, *EditGroupsReq) (*EditGroupsResp, error)
	// 查找规则组
	GetGroups(context.Context, *GetGroupsReq) (*GetGroupsResp, error)
	// 批量获取规则组
	BatchGetGroups(context.Context, *BatchGetGroupsReq) (*BatchGetGroupsResp, error)
	// 增加单个规则组
	AddGroup(context.Context, *AddGroupReq) (*AddGroupResp, error)
	// 获取单个规则详情
	GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error)
	// 获取规则流水日志
	GetGroupsLog(context.Context, *GetGroupLogsReq) (*GetGroupLogsResp, error)
	// 计算是否匹配规则
	IfInGroup(context.Context, *IfInGroupReq) (*IfInGroupResp, error)
}

// UnimplementedBackendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (*UnimplementedBackendServiceServer) AddGroups(context.Context, *AddGroupsReq) (*AddGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroups not implemented")
}
func (*UnimplementedBackendServiceServer) EditGroups(context.Context, *EditGroupsReq) (*EditGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGroups not implemented")
}
func (*UnimplementedBackendServiceServer) GetGroups(context.Context, *GetGroupsReq) (*GetGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (*UnimplementedBackendServiceServer) BatchGetGroups(context.Context, *BatchGetGroupsReq) (*BatchGetGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetGroups not implemented")
}
func (*UnimplementedBackendServiceServer) AddGroup(context.Context, *AddGroupReq) (*AddGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (*UnimplementedBackendServiceServer) GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedBackendServiceServer) GetGroupsLog(context.Context, *GetGroupLogsReq) (*GetGroupLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsLog not implemented")
}
func (*UnimplementedBackendServiceServer) IfInGroup(context.Context, *IfInGroupReq) (*IfInGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IfInGroup not implemented")
}

func RegisterBackendServiceServer(s *grpc.Server, srv BackendServiceServer) {
	s.RegisterService(&_BackendService_serviceDesc, srv)
}

func _BackendService_AddGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).AddGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apc.group.BackendService/AddGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).AddGroups(ctx, req.(*AddGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_EditGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).EditGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apc.group.BackendService/EditGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).EditGroups(ctx, req.(*EditGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apc.group.BackendService/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetGroups(ctx, req.(*GetGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_BatchGetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).BatchGetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apc.group.BackendService/BatchGetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).BatchGetGroups(ctx, req.(*BatchGetGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apc.group.BackendService/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).AddGroup(ctx, req.(*AddGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apc.group.BackendService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetGroup(ctx, req.(*GetGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetGroupsLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetGroupsLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apc.group.BackendService/GetGroupsLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetGroupsLog(ctx, req.(*GetGroupLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_IfInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IfInGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).IfInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apc.group.BackendService/IfInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).IfInGroup(ctx, req.(*IfInGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BackendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apc.group.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGroups",
			Handler:    _BackendService_AddGroups_Handler,
		},
		{
			MethodName: "EditGroups",
			Handler:    _BackendService_EditGroups_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _BackendService_GetGroups_Handler,
		},
		{
			MethodName: "BatchGetGroups",
			Handler:    _BackendService_BatchGetGroups_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _BackendService_AddGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _BackendService_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupsLog",
			Handler:    _BackendService_GetGroupsLog_Handler,
		},
		{
			MethodName: "IfInGroup",
			Handler:    _BackendService_IfInGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/group.proto",
}
